• main.tf 
# IAM User for Terraform 
resource "aws_iam_user" "terrafrom_user" { 
name = var.iam_user_name 
} 

# Attach AdministratorAccess policy to the IAM user 
resource "aws_iam_user_policy_attachment" 
"admin_policy_attachment" { 
policy_arn = "arn:aws:iam::aws:policy/AdministratorAccess" 
user       
} 
= aws_iam_user.terrafrom_user.id 

# S3 Bucket for Terraform state 
resource "aws_s3_bucket" "terraform_state_bucket" { 
bucket = var.bucket_name 
lifecycle { 
prevent_destroy = true 
} 
  
tags = { 
Name    = var.bucket_name 
} 
} 

# Enable versioning for the S3 bucket 
resource "aws_s3_bucket_versioning" "versioning_enable" { 
bucket = aws_s3_bucket.terraform_state_bucket.id 
versioning_configuration { 
status = "Enabled" 
} 
} 

# S3 Bucket Policy 
resource "aws_s3_bucket_policy" "s3_bucket_policy" { 
bucket = aws_s3_bucket.terraform_state_bucket.id 
policy = jsonencode({ 
Version = "2012-10-17", 
Statement = [ 
{ 
Effect   = "Allow", 
Action   = "s3:ListBucket", 
Resource = aws_s3_bucket.terraform_state_bucket.arn, 
Principal = { 
AWS = aws_iam_user.terrafrom_user.arn 
} 
}, 
{ 
Effect   = "Allow", 
Action   = ["s3:GetObject", "s3:PutObject"], 
Resource = 
"${aws_s3_bucket.terraform_state_bucket.arn}/*", 
Principal = { 
AWS =aws_iam_user.terrafrom_user.arn 
} 
} 
] 
}) 
} 

# DynamoDB Table for state locking 
resource "aws_dynamodb_table" "state_lock_table" { 
name         
= var.table_name 
billing_mode = "PAY_PER_REQUEST" 
hash_key     = "LockID" 
attribute { 
name = "LockID" 
type = "S" 
} 
lifecycle { 
prevent_destroy = true 
} 
tags = { 
Name    = var.table_name 
} 
} 

• outputs.tf 
output "iam_user_arn" { 
value = aws_iam_user.terrafrom_user.arn 
} 

• variables.tf 
variable "iam_user_name" {} 
variable "bucket_name" {} 
variable "table_name" {} 
IAM User Creation (aws_iam_user) 
  
You create an AWS IAM user (terraform_user) specifically for 
Terraform operations.  
Policy Attachment (aws_iam_user_policy_attachment) 
You attach the AdministratorAccess policy to the IAM user. This 
grants the user full access to AWS services and resources, which 
allows Terraform to manage the infrastructure. 
Bucket for State Storage (aws_s3_bucket) 
You define an S3 bucket to store Terraform’s state files. 
S3 Bucket Versioning (aws_s3_bucket_versioning) 
You enable versioning for the S3 bucket to keep a history of the state 
files. This is useful for rollback and audit purposes. 
DynamoDB Table for State Locking (aws_dynamodb_table) 
You create a DynamoDB table used for state locking. 
Root Module Integration with Initial Setup 

Main.tf 
terraform { 
required_providers { 
aws = { 
source  = "hashicorp/aws" 
version = "~> 5.0" 
} 
} 
} 
  
# Configure the AWS Provider 
provider "aws" { 
region = "us-east-1" 
access_key = var.access_key  
secret_key = var.secret_key  
} 

# Create a VPC 
resource "aws_vpc" "example" { 
cidr_block = "10.0.0.0/16" 
} 
module "backend" { 
source = "./modules/remote_backend" 
iam_user_name = var.iam_user_name 
bucket_name = var.bucket_name 
table_name = var.table_name 
} 
output "iam_user_name" { 
value = module.backend.iam_user_arn   
} 

Variables.tf 
variable "region" {} 
variable "iam_user_name" {} 
variable "bucket_name" {} 
variable "table_name" {} 
variable "access_key" {} 
variable "secret_key" {} 

Terraform.tfvars 
region = "us-east-1" 
iam_user_name = "terraform_user" 
bucket_name = "terraform-state-bucket2801" 
table_name = "terraform_state_locks"